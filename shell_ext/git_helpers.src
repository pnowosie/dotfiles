# Git helpers
GITHUB_SSH_KEY_PATH="${HOME}/.ssh/id_rsa"

# Aliases
alias g=git
alias gad='git add . ; git status'
alias masta='git checkout master'
alias mastaf='git clean -fd && git checkout -f master'
alias ltee='git l | tee'
alias shl='git stash list'
alias shap='git stash apply'

# Branch clean up

#[DOC]: Deletes local branches which already have been merged
# You can exclude more patterns by `master|develop|release`
alias rm-merged='git branch --merged | egrep -v "(^\*|master)" | xargs git branch -d'

#[DOC]: Cleans up remote tracking branches
alias rm-tracking='git remote prune origin'


# Simple aliases are defined in .gitconfig

# Functions

function currbranch() {
  bl=`git branch | grep \*`

  local exit_code=$?
  if [ $exit_code -ne 0 ]; then
    return $exit_code;
  else 
    echo "$bl" | cut -d ' ' -f2
  fi
}

# am I on master?
function onmaster() {
    [[ $(currbranch) == "master" ]]
    return
}

# std rebase feature branch onto master or just git pull on master
function rebase() {
    if onmaster; then
        git pull
        say $BLUE "ready on master"
    else
        branch=$(currbranch)
        git checkout master
        git pull
        git checkout $branch
        runtest git rebase master
    fi
}

# Updates (resets) to the remote upstream branch potencially loosing local history
function reset-to-upstream() {
    if onmaster; then
        say $RED "don't hard-reset MASTER, please!"
    else
        git fetch --all
        git reset --hard origin/$(currbranch)
    fi
}

# check whether working copy is up to date with upstream
function curr() {
    uptodate="Your branch is up to date"
    git fetch
    stan=`git status --ahead-behind`
    echo $stan | grep $uptodate > /dev/null
    local exit_code=$?
 
    if [ $exit_code -eq 0 ]; then
        echo "$fg[white]$uptodate$reset_color"
    else
        echo $stan
    fi
}

# picks a current HEAD sha
function hed() {
  git log --color -1 --abbrev-commit --pretty=format:'%C(bold white)%h%Creset (%Cblue%an%Creset %Cgreen%cr%Creset) %C(bold white)*%Creset %C(bold)%s%Creset ' | tee
}

# switch branch based on part of the name
function bb() {
  branch=$(git branch | grep "$1")
  if [[ $? != 0 ]]; then
    echo "ðŸš« No branch matching the pattern"
    return 1
  fi

  oneline=$(echo "${branch}" | wc -l | xargs)
  if [[ $oneline != 1 ]]; then
    echo "${branch}"
    echo "ðŸ‘† More than one possible branch"
    return 2
  fi

  echo "${branch}" | grep "*"
  if [[ $? == 0 ]]; then
    echo "Already current branch"
    return
  fi

  branch=$(echo "${branch}" | xargs)
  echo "âœ… Switching to branch: ${branch}"
  git checkout ${branch}
}

function ssh-agent-start() {
  eval "$(ssh-agent -s)"
  ssh-add "${GITHUB_SSH_KEY_PATH}" 
}

# Applies a git stash entry and resolve conflict to the applied changes
# USE WITH CAUTION - will wipe new things out when your entry in stash is old
function stasio() {
  stash_id=$1
  [[ -z "${stash_id}" ]] && stash_id=0
  git stash apply ${stash_id}
  if [[ $? != 0 ]]; then
    echo "we have a conflict! - resolving"
    git checkout --theirs -- .
    git add .
    git restore --staged .
  fi

  git status
}

# Helper function to delete old merged tracking local branches
function drop-old() {
  git remote prune origin

  git branch --merged | egrep -v "(^\*|master|dev|chain4travel)" > /tmp/merged-branches

  # allow to check & rescue some local branched
  ${EDITOR} /tmp/merged-branches

  xargs git branch -d < /tmp/merged-branches
}
